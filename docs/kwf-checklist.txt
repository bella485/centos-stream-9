
KWF Checklist Prerequisites

* Your gitlab account is established. See...
  https://tinyurl.com/RedHat-gitlab-configuration

* The lab app has been installed. See ...
  https://tinyurl.com/lab-utility

* You have created your ~/.config/lab/lab.toml file
  with the following contents.

  [core]
     host = "https://gitlab.com"
     token = "<your token enclosed in double quotes"
     user = "<your username enlcosed in double quotes"

* You must have a bugzilla number in order to submit anything.
  If the bugzilla does not yet exist, create it.

* For more details on the Kernel Work Flow in general, see...
  https://tinyurl.com/KWF-Quick-Start



KWF Checklist

* Set bugzilla flags and milestone dates
  https://tinyurl.com/BugzillaProcess

  * Get release approval for the bugzilla
    http://pkgs.devel.redhat.com/rules.html

* git clone the project, if it doesn't already exist

* create your fork, if it doesn't already exist
  $ lab fork

* If you have already cloned the project, update it.
  $ git fetch --all
  $ git checkout main
  $ git pull

* Checkout a branch to do your work
  NOTE: If your work depends on unmerged changes, first
        checkout that merge request.
        $ lab mr checkout <merge-number>
  $ git checkout -b <workbranch>
   :
  Make your edits, bugfixes, backports, etc.
  Be sure to commit your changes with 'git commit -s' to get your
  signoff.

* Push your changes to your fork, fork <-- branch
  $ git push <myfork> <workbranch>

* Create a cover letter file for your merge request. Start the
  description with three backticks in order to guarantee proper
  linefeeding.

  $ vim <mycover>.txt

  <Summary line>
  <emptyline>
  ```
  <description text>
  <empty line>
  Signed-off-by: User Name <user@redhat.com>

* Create your merge request.
  $ git checkout <workbranch>
  $ lab mr create \
      -f <mycover>.txt \
      --force-linebreak \
      -r <reviewer> -r <reviewer> -r <reviewer> \
      origin

* Modify your merge request
  $ git checkout <workbranch>
    <make your edits, additions, deletions, etc>
  $ git commit -s <edited files>
  $ git push -f <myfork> <workbranch>



KWF Checklist Addendum

While synchronizing your fork to the latest commit in origin is not
necessary, it is annoying to see dozens of commits having nothing
to do with your work being pushed to your fork, because it is out
of sync with the origin.

If you want to update your fork before pushing your changes to it,
you must assure that it allows a forced push.

* All your forks are listed at https://gitlab/<username>
* Select one of your forks to synchronize.
* When your fork page appears, it looks just like the main repo page.
* Hover over settings button (gear symbol) at bottom of the left column.
* Select 'Repository' from the list that appears
* Click the 'Expand' button to the right of the  'Protected Branches' field
* Scroll down to the bottom of that entry where it lists protected branches
  to the row starting with 'main'.
* Slide the 'Allow to force push' to its 'ON' position.
